{"version":3,"sources":["assets/Script/Board.js","assets/Script/Circle.js","assets/Script/Config.js","assets/Script/EnableCollider.js","assets/Script/Hammer.js","assets/Script/Shape.js","assets/Script/util/Util.js","assets/Script/game.js","assets/Script/piece.js","assets/Script/start.js"],"names":["_Config","require","_Util","cc","Class","extends","Component","properties","hexSide","tileH","tilePic","default","type","SpriteFrame","bomb","Prefab","type1","type2","type3","type4","type5","type6","type7","type8","start","this","Lock1Node","find","Lock2Node","rocket","nice","StarLockCount","totalPopArrs","resultArr","theScore","onLoad","setHexagonGrid","node","on","deleteTile","getOldScore","onSeekHelpBtnClicked","loader","loadRes","err","data","wx","shareAppMessage","title","imageUrl","url","success","res","shareTickets","undefined","log","length","fail","console","oldScore","sys","localStorage","getItem","label","getComponent","Label","string","Number","sortCurrTileByAroundNum","boardFrameList","i","loc","c","getAroundNum","d","reverse","_i","block","idx","neighborArr","count","isFulled","_Util2","getNeighbors","getChildByName","tag","checkOneBlockCanPop","idxArr","neiArr","sneiArr","tneiArr","uneiArr","zneiArr","fneiArr","tmpArr","indexOf","push","String","j","k","m","n","t","g","_j","changeRange","fillTiles","parent","children","fillTilesLength","fillTile","fillTileScript","rangeAdd","checkCanPut","checkEnd","gameOver","event","_this","detail","msg","trim","split","_i2","_loop","b","_loop2","delNode","finished","callFunc","Sprite","spriteFrame","opacity","addScore","runAction","sequence","fadeOut","niceMoveAction","btag","setTexture","raw","starBombArr","_loop3","_i3","eff","instantiate","setPosition","x","y","delayTime","msgContent","_i4","emit","addScoreCount","scoreRule","Failed","gameOverScore","active","fadeIn","_this2","hexes","q","r1","Math","max","r2","min","r","col","row","hex2pixel","forEach","hexs","setSpriteFrame","setLogicIdx","hex","h","size","sqrt","p","index","Node","sprite","addComponent","setShadowNode","setFillNode","resetBoard","boardNode","newNode","name","setMoveNode","onRestartClick","director","loadScene","spriteMoveAction","moveTo","v2","easing","easeCircleActionInOut","callfunc","easeCubicActionInOut","onRocketBtnClick","_this3","getRandomInt","_loop4","RocketLine","scaleTo","update","dt","speed","updateCircle","rotation","DelRules","Tiles","list","exports","is_enbale","is_debug","manager","getCollisionManager","enabled","enabledDebugDraw","_Board","Count","board","_Board2","addTouchEvent","HammerCntLabel","ox","oy","markedTile","setScale","boardTiles","_event$touch$getDelta","touch","getDelta","checkCollision","dropPrompt","removeTile1","iterateRestore","fillNode","backSourcePos","removeTile","tile","pos","position","boardTile","checkDistance","distance","frameNode","nodeDistance","pDistance","resetBoardFrames","shadowNode","boardTilesLength","ratio","random0To1","floor","tileScale","turn","range","setTile","TurnCntLabel","setTile1","tiles","hexData","random1","hexPx","map","hexArr","scale","random","shape","isBuilding","onTurnBtn","resetTile","onReverseBtn","child","checkCanDrop","tileDrop","locations","checkCurBoard","resetTile1","curTileLength","boardFrameListLength","checkLose1","checkDrop","checkLose","tilesLength","canDropCount","srcPos","len","tilePos","pAdd","_boardNode","dis","removeAllChildren","canDrop","_","arrIntersect","arr1","arr2","intersectArr","arrUnion","exclude1","exclude2","unionArr","leti","checkArrIsEqual","disList","_properties","_defineProperty","checkMatch","arg","error","lbxNodes","lbxNodesIndex","maxCount","posList","addVec","pMult","pForAngle","PI","pianyiTo0p0Vec","frameList","fPosList","oneSrcPos","aimPos","fpos","FKIndex","InitBoard","scaleParam","getPieceConfig","a","configLists","newBlock","wenliNode","wenliSprite","newPiece","blockNode","configList","randomIdx","sumX","countX","sumY","countY","addChild","upH","self","EventType","TOUCH_START","TOUCH_MOVE","delta","collisionFunc","checkIsCanDrop","changeColorDeal","TOUCH_CANCEL","dropDownFunc","TOUCH_END","checkFrameList","checkFKList","rankingScrollView","CC_WECHATGAME","isClick","onfriendClick","onFriendCancelClick","onStartClick","onShareClick","onGameClick","onRankClick","onSoundClick","_updateSubDomainCanvas","window","sharedCanvas","tex","initWithElement","handleLoadedTexture"],"mappings":"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,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA;;SACF,KAAA;UACE/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA;;SACF,KAAA;UACE/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA;;SACF,KAAA;UACE/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA;;SACF,KAAA;UACE/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA;;SACF,KAAA;UACE/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA;;SACF,KAAA;UACE/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA;;SACF,KAAA;UACE/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA;;SACF,KAAA;UACE/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA;;SACF,KAAA;UACE/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA;;SACF,KAAA;UACE/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA;;SACF,KAAA;UACE/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA;;SACF,KAAA;UACE/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA;;SACF,KAAA;UACE/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA;;SACF,KAAA;UACE/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA;;SACF,KAAA;UACE/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA;;SACF,KAAA;UACE/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA;;SACF,KAAA;UACE/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA;;SACF,KAAA;UACE/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA;;SACF,KAAA;UACE/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA;;SACF,KAAA;UACE/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA;;SACF,KAAA;UACE/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA;;SACF,KAAA;UACE/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA;;SACF,KAAA;UACE/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA;;SACF,KAAA;UACE/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA;;SACF,KAAA;UACE/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA;;SACF,KAAA;UACE/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA;;SACF,KAAA;UACE/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA;;SACF,KAAA;UACE/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA;;SACF,KAAA;UACE/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA;;SACF,KAAA;UACE/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA;;SACF,KAAA;UACE/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA/D,UAAA+D,KAAA;UACA;;SACF,KAAA;UACE/D,UAAA+D,KAAA;UACA/D,UAAA+D,KA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","sourcesContent":["import { RocketLine } from 'Config';\nimport _ from './util/Util';\n\n// let theScore = 0;\n\ncc.Class({\n  extends: cc.Component,\n\n  properties: {\n    hexSide: 4, // 需要生成的六边形布局的边界个数\n    tileH: 110, // 六边形高度\n    tilePic: {\n      // 棋盘背景\n      default: null,\n      type: cc.SpriteFrame\n    },\n    bomb: {\n      default :null,\n      type: cc.Prefab\n    }, \n     // 以下为各方块类型图片\n    type1: {\n      default: null,\n      type: cc.SpriteFrame\n    },\n    type2: {\n      default: null,\n      type: cc.SpriteFrame\n    },\n    type3: {\n      default: null,\n      type: cc.SpriteFrame\n    },\n    type4: {\n      default: null,\n      type: cc.SpriteFrame\n    },\n    type5: {\n      default: null,\n      type: cc.SpriteFrame\n    },\n    type6: {\n      default: null,\n      type: cc.SpriteFrame\n    },\n    type7: {\n      default: null,\n      type: cc.SpriteFrame\n    },\n    type8: {\n      default: null,\n      type: cc.SpriteFrame\n    }\n  },\n\n  // LIFE-CYCLE CALLBACKS:\n  start() {\n    this.Lock1Node = cc.find('Canvas/StarUnlock/Lock1');\n    this.Lock2Node = cc.find('Canvas/StarUnlock/Lock2');\n    this.rocket = cc.find('Canvas/rocket');\n    this.nice = cc.find('Canvas/nice');\n    this.StarLockCount = 2;\n    this.totalPopArrs = [];\n    this.resultArr = [];\n    this.theScore = 0;\n  },\n\n  onLoad() {\n    this.setHexagonGrid();\n    this.node.on('dropSuccess', this.deleteTile, this);\n    this.getOldScore();\n    // wx.updateShareMenu({\n    //   withShareTicket: true\n    // })\n  },\n\n  onSeekHelpBtnClicked() { //求助好友群按钮\n    cc.loader.loadRes(\"pics/logo\",function(err,data){\n      wx.shareAppMessage({\n        title: \"经典小游戏始终好玩如初，来吧！一起来回味吧！\",\n        imageUrl: data.url,\n        success(res){\n          if (res.shareTickets == null || res.shareTickets == undefined || res.shareTickets == \"\") { //没有群信息，说明分享的是个人\n            cc.log(\"res.shareTickets is null\");\n           //self.showTipsUI(\"请分享到群获得生命值\");\n          } else { //有群信息\n            cc.log(\"res.shareTickets is not null\");\n            if(res.shareTickets.length > 0){ \n              //common.heart = common.maxHeart; //恢复生命\n              //self.showTipsUI(\"已回满生命值\");\n            }\n          }\n        },\n        fail(res){\n          console.log(\"转发失败!!!\");\n        } \n      })\n    });\n  },\n\n  getOldScore() {\n    const oldScore = cc.sys.localStorage.getItem('score');\n    let node = cc.find('Canvas/Score');\n    let label = node.getComponent(cc.Label);\n    label.string = Number(oldScore);\n  },\n\n  sortCurrTileByAroundNum() {\n    const boardFrameList = this.boardFrameList;\n\n    for (let i = 0; i < this.loc.length;i++) {\n      cc.log(\"before this.loc: \" + this.loc[i] );\n    }\n\n    let c = this.getAroundNum(this.loc[0]);\n    let d = this.getAroundNum(this.loc[this.loc.length-1]);\n\n\n    if (c < d) {\n      this.loc = this.loc.reverse();\n    } \n\n    \n    for (let i = 0; i < this.loc.length;i++) {\n      cc.log(\"after this.loc: \" + this.loc[i] );\n    }\n  },\n\n  getAroundNum(block) {\n    const boardFrameList = this.boardFrameList;\n    let idx  = Number(block);\n    let neighborArr = [];\n    let count = 0;\n\n    if (boardFrameList[idx] && boardFrameList[idx].isFulled) {\n      neighborArr = _.getNeighbors(block);\n\n      for (let i = 0;i < neighborArr.length;i++) {\n          if (boardFrameList[neighborArr[i]].isFulled && idx != Number(neighborArr[i]) \n          &&  (boardFrameList[neighborArr[i]].getChildByName('fillNode').tag == boardFrameList[idx].getChildByName('fillNode').tag)) {\n              count++;\n          }\n      }\n    }\n\n    return count;\n  },\n\n  checkOneBlockCanPop(block) {\n    const boardFrameList = this.boardFrameList;\n    //let tmpArr = [];\n    this.idxArr = [];\n    this.neiArr = [];\n    this.sneiArr = [];\n    this.tneiArr = [];\n    this.uneiArr = [];\n    this.zneiArr = [];\n    this.fneiArr = [];\n    let idx = Number(block);\n\n    if (boardFrameList[idx] && boardFrameList[idx].isFulled) {\n        // if (this.resultArr.indexOf(boardFrameList[idx]) == -1) {\n        //   this.resultArr.push(boardFrameList[idx]);\n        // }       \n        \n        this.tmpArr = _.getNeighbors(block);\n        for (let i = 0; i < this.tmpArr.length;i++) {\n            if (boardFrameList[this.tmpArr[i]].isFulled && idx != Number(this.tmpArr[i]) \n              &&(boardFrameList[this.tmpArr[i]].getChildByName('fillNode').tag == boardFrameList[idx].getChildByName('fillNode').tag) \n              &&(this.resultArr.indexOf(boardFrameList[this.tmpArr[i]]) == -1)) {\n                this.resultArr.push(boardFrameList[this.tmpArr[i]]);\n                this.neiArr = _.getNeighbors(String(this.tmpArr[i]));\n\n                for (let j = 0;j < this.neiArr.length;j++) {\n                    if (boardFrameList[this.neiArr[j]].isFulled && Number(this.tmpArr[i]) != Number(this.neiArr[j]) \n                    &&(boardFrameList[this.tmpArr[i]].getChildByName('fillNode').tag == boardFrameList[this.neiArr[j]].getChildByName('fillNode').tag) \n                    &&(this.resultArr.indexOf(boardFrameList[this.neiArr[j]]) == -1)) {\n                      this.resultArr.push(boardFrameList[this.neiArr[j]]);\n                      this.sneiArr = _.getNeighbors(String(this.neiArr[j]));\n\n                      for (let k = 0;k < this.sneiArr.length;k++) {\n                        if (boardFrameList[this.sneiArr[k]].isFulled && Number(this.neiArr[j]) != Number(this.sneiArr[k]) \n                        &&(boardFrameList[this.neiArr[j]].getChildByName('fillNode').tag == boardFrameList[this.sneiArr[k]].getChildByName('fillNode').tag) \n                        &&(this.resultArr.indexOf(boardFrameList[this.sneiArr[k]]) == -1)) {\n                          this.resultArr.push(boardFrameList[this.sneiArr[k]]);\n                          this.tneiArr = _.getNeighbors(String(this.sneiArr[k]));\n\n                          for (let m = 0;m < this.tneiArr.length;m++) {\n                            if (boardFrameList[this.tneiArr[m]].isFulled && Number(this.tneiArr[m]) != Number(this.sneiArr[k]) \n                            &&(boardFrameList[this.tneiArr[m]].getChildByName('fillNode').tag == boardFrameList[this.sneiArr[k]].getChildByName('fillNode').tag) \n                            &&(this.resultArr.indexOf(boardFrameList[this.tneiArr[m]]) == -1)) {\n                              this.resultArr.push(boardFrameList[this.tneiArr[m]]);\n                              this.uneiArr = _.getNeighbors(String(this.tneiArr[m]));\n                              \n                              for (let n = 0;n < this.uneiArr.length;n++) {\n                                if (boardFrameList[this.uneiArr[n]].isFulled && Number(this.tneiArr[m]) != Number(this.uneiArr[n]) \n                                &&(boardFrameList[this.tneiArr[m]].getChildByName('fillNode').tag == boardFrameList[this.uneiArr[n]].getChildByName('fillNode').tag) \n                                &&(this.resultArr.indexOf(boardFrameList[this.uneiArr[n]]) == -1)) {\n                                  this.resultArr.push(boardFrameList[this.uneiArr[n]]);\n                                  this.zneiArr = _.getNeighbors(String(this.tneiArr[m]));\n          \n                                  for (let t = 0;t < this.zneiArr.length;t++) {\n                                    if (boardFrameList[this.zneiArr[t]].isFulled && Number(this.zneiArr[t]) != Number(this.uneiArr[n]) \n                                    &&(boardFrameList[this.zneiArr[t]].getChildByName('fillNode').tag == boardFrameList[this.uneiArr[n]].getChildByName('fillNode').tag) \n                                    &&(this.resultArr.indexOf(boardFrameList[this.zneiArr[t]]) == -1)) {\n                                      this.resultArr.push(boardFrameList[this.zneiArr[t]]);\n                                      this.fneiArr = _.getNeighbors(String(this.zneiArr[t]));\n\n                                      for (let g = 0;g < this.fneiArr.length;g++) {\n                                        if (boardFrameList[this.fneiArr[g]].isFulled && Number(this.zneiArr[t]) != Number(this.fneiArr[g]) \n                                        &&(boardFrameList[this.fneiArr[g]].getChildByName('fillNode').tag == boardFrameList[this.zneiArr[t]].getChildByName('fillNode').tag) \n                                        &&(this.resultArr.indexOf(boardFrameList[this.fneiArr[g]]) == -1)) {\n                                          this.resultArr.push(boardFrameList[this.fneiArr[g]]);\n                                          //this.fneiArr = _.getNeighbors(String(this.zneiArr[t]));\n                                      }\n                                  }\n                                }\n                            }\n                          }\n                      }\n                    }\n                  }\n                } \n              }         \n            }\n          }\n        }\n\n        //cc.log(\"this.resultArr : \" + this.resultArr.length);\n        if (this.resultArr.length > 2) {\n          //cc.log(\"resultArr filled\");\n          this.totalPopArrs.push(this.resultArr);\n          this.resultArr = [];\n        } else {\n          for (let j = 0;j < this.resultArr.length;j++) {\n            this.resultArr[j].isFulled = true;\n          }\n        } \n      }\n    }\n  },\n\n  changeRange() {\n    const fillTiles = this.node.parent.getChildByName('TileContainer').children;\n    const fillTilesLength = fillTiles.length;\n    for (let i = 0; i < fillTilesLength; i++) {\n      const fillTile = fillTiles[i];\n      const fillTileScript = fillTile.getComponent('Shape'); // 直接获取方块节点下的脚本组件\n      fillTileScript.rangeAdd();\n    }\n  },\n\n  checkCanPut() {\n    const fillTiles = this.node.parent.getChildByName('TileContainer').children;\n    const fillTilesLength = fillTiles.length;\n    for (let i = 0; i < fillTilesLength; i++) {\n      const fillTile = fillTiles[i];\n      const fillTileScript = fillTile.getComponent('Shape'); // 直接获取方块节点下的脚本组件\n      if (fillTileScript.checkEnd()) {\n        this.gameOver();\n      } \n    }\n  },\n\n  deleteTile(event) {\n    this.totalPopArrs = [];\n    this.resultArr = [];\n    this.tmpArr = [];\n    this.loc = [];\n    //this.addScore(this.curTileLength, true); \n    this.block = (event.detail.msg).trim().split(\",\");\n    for (let i = 0;i < this.block.length - 1;i++) {\n      this.loc.push(this.block[i]);\n    }\n\n    //this.sortCurrTileByAroundNum();\n    for (let i = 0;i < this.loc.length;i++) {\n        this.checkOneBlockCanPop(this.loc[i]);\n        if (this.totalPopArrs.length > 0) {\n          for (let j = 0;j < this.totalPopArrs.length;j++) {\n            let b = this.totalPopArrs[j];\n            for (let k = 1;k < b.length;k++) {\n                let delNode = b[k].getChildByName('fillNode');\n                //let moveNode = b[k].getChildByName('moveNode');\n                b[k].isFulled = false;\n\n                // var x  = b[k].x;\n                // var y = b[k].y\n                // const finished1 = cc.callFunc(() => {\n                //   moveNode.getComponent(cc.Sprite).spriteFrame = null;\n                //   cc.delayTime(1);\n                //   moveNode.setPosition(x,y);\n                // }, this);\n\n                // var action2 = cc.moveTo(0.2,cc.v2(13,-5000)).easing(cc.easeBackInOut());;\n                // moveNode.runAction(cc.sequence(action2,finished1));\n     \n       \n\n                const finished = cc.callFunc(() => {\n                  delNode.getComponent(cc.Sprite).spriteFrame = null;\n                  delNode.opacity = 255;\n                  this.addScore(k);\n                  //delNode.tag = -1;\n                }, this);\n                \n                delNode.runAction(cc.sequence(cc.fadeOut(0.6),finished));            \n            }\n\n            this.changeRange(); \n            if (this.totalPopArrs.length > 2) {\n              this.niceMoveAction();\n            }\n            \n            \n            let tag = b[0].getChildByName('fillNode').tag;\n            let btag = b[0].tag;\n            if (tag > 0 && tag <= 7) {\n                tag++;\n                b[0].getChildByName('fillNode').tag = tag;\n                if (tag == 8) {\n                  if (this.StarLockCount == 2) {\n                    this.Lock1Node.getComponent(cc.Sprite).spriteFrame.setTexture(cc.url.raw('resources/pics/daojugaoliang.png'));\n                    this.StarLockCount--;\n                  } else if (this.StarLockCount == 1) {\n                    this.Lock2Node.getComponent(cc.Sprite).spriteFrame.setTexture(cc.url.raw('resources/pics/daojugaoliang.png'));\n                    this.StarLockCount--;\n                  }\n                }\n                b[0].getChildByName('fillNode').getComponent(cc.Sprite).spriteFrame = this['type' + tag];\n                //b[0].getChildByName('moveNode').getComponent(cc.Sprite).spriteFrame = this['type' + tag];\n                b[0].isFulled = true;\n\n              } else if (tag == 8) {\n                let starBombArr = _.getNeighbors(String(btag));\n                for (let i = 0;i < starBombArr.length;i++) {\n                  let delNode = this.boardFrameList[Number(starBombArr[i])];\n                  const finished = cc.callFunc(() => {\n                     let eff = cc.instantiate(this.bomb);\n                     eff.parent = this.node.parent;\n                     eff.setPosition(delNode.x,delNode.y);\n                     cc.fadeOut(0.3);\n                     //delNode.getComponent(cc.Sprite).spriteFrame = null;\n                     delNode.getComponent(cc.Sprite).spriteFrame = this.tilePic;\n                     delNode.opacity = 255;\n                     delNode.isFulled = false;\n                     b[0].getChildByName('fillNode').getComponent(cc.Sprite).spriteFrame = this.tilePic;\n                     //b[0].getChildByName('moveNode').getComponent(cc.Sprite).spriteFrame = this.tilePic;\n                     b[0].isFulled = false;\n                  }, this);\n                  //\n                  delNode.runAction(cc.sequence(cc.delayTime(0.2), finished));\n                }\n\n              }\n              \n              let msgContent = b[0].tag + \",\"; //检查是否有连在一起的同色block\n                let neighborArr = _.getNeighbors(String(btag));\n                for (let i = 0;i < neighborArr.length;i++) {\n                  if (this.boardFrameList[neighborArr[i]].isFulled) {\n                    msgContent += neighborArr[i];\n                    msgContent += \",\";\n                  }\n                }\n                \n                this.node.emit('dropSuccess',{\n                  msg: msgContent,\n                });\n            }       \n        } else {\n          this.checkCanPut();\n        }\n\n        this.resultArr = [];\n        this.totalPopArrs = [];\n      }\n  },\n\n  addScore(count) {\n    let addScoreCount = this.scoreRule(count);\n    let node = cc.find('Canvas/Score');\n    let label = node.getComponent(cc.Label);\n    label.string = addScoreCount + Number(label.string);\n    this.theScore = Number(label.string);\n  },\n  scoreRule(count) {\n    let x = count + 1;\n    let addScoreCount = 1 ? x : 2 * x * 10;\n    return addScoreCount;\n  },\n\n\n  // checkLose() {\n  //   if (this.isDeleting) return;\n\n  //   const fillTiles = this.node.parent.getChildByName('TileContainer').children;\n  //   const fillTilesLength = fillTiles.length;\n  //   let count = 0;\n\n  //   for (let i = 0; i < fillTilesLength; i++) {\n  //     const fillTile = fillTiles[i];\n  //     const fillTileScript = fillTile.getComponent('Shape'); // 直接获取方块节点下的脚本组件\n  //     if (fillTileScript.checkLose()) {\n  //       count++;\n  //       fillTile.opacity = 125;\n  //     } else {\n  //       fillTile.opacity = 255;\n  //     }\n  //   }\n  //   if (count === 3) {\n  //     const oldScore = cc.sys.localStorage.getItem('score');\n  //     if (oldScore < theScore) {\n  //       cc.sys.localStorage.setItem('score', theScore);\n  //     }\n  //     this.gameOver();\n  //   }\n  // },\n  gameOver() {\n    const Failed = cc.find('Canvas/GameOver');\n    this.gameOverScore = cc.find('Canvas/GameOver/Score');\n    // const oldScore = cc.sys.localStorage.getItem('score');\n    // if (oldScore < theScore) {\n    //     cc.sys.localStorage.setItem('score', theScore);\n    // }\n    this.gameOverScore.getComponent(cc.Label).string = String(this.theScore);\n    Failed.active = true;\n    Failed.runAction(cc.fadeIn(0.3));\n  },\n  setHexagonGrid() {\n    this.hexes = [];\n    this.boardFrameList = [];\n    this.resultArr = [];\n    this.hexSide--;\n    // 六角网格布局，坐标系存储方法\n    for (let q = -this.hexSide; q <= this.hexSide; q++) {\n      let r1 = Math.max(-this.hexSide, -q - this.hexSide);\n      let r2 = Math.min(this.hexSide, -q + this.hexSide);\n      for (let r = r1; r <= r2; r++) {\n        let col = q + this.hexSide;\n        let row = r - r1;\n        if (!this.hexes[col]) {\n          this.hexes[col] = [];\n        }\n        this.hexes[col][row] = this.hex2pixel({ q, r }, this.tileH);\n      }\n    }\n    this.hexes.forEach(hexs => {\n      this.setSpriteFrame(hexs);\n    });\n    this.setLogicIdx();\n  },\n  hex2pixel(hex, h) {\n    // 六角网格，坐标系转换像素方法\n    let size = h / 2;\n    let x = size * Math.sqrt(3) * (hex.q + hex.r / 2);\n    let y = ((size * 3) / 2) * hex.r;\n    return cc.p(x, y);\n  },\n  setSpriteFrame(hexes) {\n    for (let index = 0; index < hexes.length; index++) {\n      let node = new cc.Node('frame');\n      let sprite = node.addComponent(cc.Sprite);\n      // let collider = node.addComponent(cc.CircleCollider);\n      // collider.tag = 2;\n      sprite.spriteFrame = this.tilePic;\n      node.x = hexes[index].x;\n      node.y = hexes[index].y;\n      node.parent = this.node;\n      hexes[index].spriteFrame = node;\n      this.setShadowNode(node);\n      this.setFillNode(node);\n      //this.setMoveNode(node);\n      // 保存当前格子的信息，用于后面判定及消除逻辑等。\n      //node.isChecked = false;\n      this.boardFrameList.push(node);\n    }\n  },\n  resetBoard() {\n    const boardFrameList = this.boardFrameList;\n    for (let i = 0; i < boardFrameList.length; i++) {\n      const boardNode = boardFrameList[i];\n      if (!boardNode.isFulled) {\n        boardFrameList[i].getComponent(cc.Sprite).spriteFrame = this.tilePic;\n    \n      }\n    }\n  },\n  setLogicIdx() { //用于获取周围棋盘编号\n    const boardFrameList = this.boardFrameList;\n    for (let i = 0;i < boardFrameList.length;i++) {\n      boardFrameList[i].tag = i;\n    }\n  },\n\n  setShadowNode(node) {\n    const newNode = new cc.Node('frame');\n    newNode.addComponent(cc.Sprite);\n    newNode.name = 'shadowNode';\n    newNode.opacity = 150;\n    newNode.parent = node;\n  },\n  setFillNode(node) {\n    const newNode = new cc.Node('frame');\n    newNode.addComponent(cc.Sprite);\n    newNode.name = 'fillNode';\n    newNode.parent = node;\n    //newNode.tag = -1;\n  },\n  setMoveNode(node) {\n    const newNode = new cc.Node('frame');\n    newNode.addComponent(cc.Sprite);\n    newNode.name = 'moveNode';\n    newNode.parent = node;\n  },\n  onRestartClick: function(){\n    cc.director.loadScene(\"gameScene\");\n  },\n  spriteMoveAction: function () {\n    //变速移动 \n    let moveTo = cc.moveTo(3, cc.v2(520,68)).easing(cc.easeCircleActionInOut());\n\n    \n    //回调函数\n    let callfunc = cc.callFunc(function () {\n      cc.delayTime(0.5);\n      this.rocket.setPosition(-540,276);\n    }, this);\n    \n    //让sprite移动\n    this.rocket.runAction(cc.sequence(moveTo, callfunc));\n    \n  },\n\n  niceMoveAction() {\n    let moveTo = cc.moveTo(2, cc.v2(26,351)).easing(cc.easeCubicActionInOut());\n\n        //回调函数\n        let callfunc = cc.callFunc(function () {\n          cc.fadeOut(1);\n          this.nice.setPosition(612,351);\n      }, this);\n      \n      //让sprite移动\n      this.nice.runAction(cc.sequence(moveTo, callfunc));\n\n  },\n\n  onRocketBtnClick: function() {\n    let idx = _.getRandomInt(0,7);\n    this.spriteMoveAction();\n    for (let i = 0;i < RocketLine[idx].length;i++) {\n      cc.log(RocketLine[idx][i]);\n      let delNode = this.boardFrameList[Number(RocketLine[idx][i])].getChildByName('fillNode');\n      this.boardFrameList[Number(RocketLine[idx][i])].isFulled = false;\n\n      const finished = cc.callFunc(() => {\n         let eff = cc.instantiate(this.bomb);\n         eff.parent = this.node.parent;\n         eff.setPosition(delNode.x,delNode.y);\n         delNode.getComponent(cc.Sprite).spriteFrame = this.tilePic;\n         delNode.opacity = 255;\n         //delNode.tag = -1;\n      }, this);\n      //\n      delNode.runAction(cc.sequence(cc.delayTime(2),cc.fadeOut(0.3),finished));\n    }\n    \n  },\n\n  eff() {\n    const boardFrameList = this.boardFrameList;\n    //  const finished = cc.callFunc(() => {\n    //   cc.scaleBy(1,1);\n    // }, this);\n      for (let i = 0;i < boardFrameList.length;i++) {\n        if (boardFrameList[i].isFulled) {\n          boardFrameList[i].getChildByName('fillNode').runAction(cc.sequence(cc.delayTime(0.1),cc.scaleTo(1,0.9)));\n        }\n      }\n  },\n\n  update (dt) {\n    this.eff();\n  },\n});\n","// Learn cc.Class:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //     // ATTRIBUTES:\n        //     default: null,        // The default value will be used only when the component attaching\n        //                           // to a node for the first time\n        //     type: cc.SpriteFrame, // optional, default is typeof default\n        //     serializable: true,   // optional, default is true\n        // },\n        // bar: {\n        //     get () {\n        //         return this._bar;\n        //     },\n        //     set (value) {\n        //         this._bar = value;\n        //     }\n        // },\n        speed:1\n\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    start () {\n\n    },\n\n    updateCircle() {\n        this.node.rotation += this.speed;\n        if (this.node.rotation >= 360) {\n            this.node.rotation -= 360;\n        }\n    },\n\n    update (dt) {\n        this.updateCircle();\n    },\n});\n","const DelRules = [\n  //左斜角\n  [0, 1, 2, 3, 4],\n  [5, 6, 7, 8, 9, 10],\n  [11, 12, 13, 14, 15, 16, 17],\n  [18, 19, 20, 21, 22, 23, 24, 25],\n  [26, 27, 28, 29, 30, 31, 32, 33, 34],\n  [35, 36, 37, 38, 39, 40, 41, 42],\n  [43, 44, 45, 46, 47, 48, 49],\n  [50, 51, 52, 53, 54, 55],\n  [56, 57, 58, 59, 60],\n\n  //右斜角\n  [26, 35, 43, 50, 56],\n  [18, 27, 36, 44, 51, 57],\n  [11, 19, 28, 37, 45, 52, 58],\n  [5, 12, 20, 29, 38, 46, 53, 59],\n  [0, 6, 13, 21, 30, 39, 47, 54, 60],\n  [1, 7, 14, 22, 31, 40, 48, 55],\n  [2, 8, 15, 23, 32, 41, 49],\n  [3, 9, 16, 24, 33, 42],\n  [4, 10, 17, 25, 34],\n\n  //水平\n  [0, 5, 11, 18, 26],\n  [1, 6, 12, 19, 27, 35],\n  [2, 7, 13, 20, 28, 36, 43],\n  [3, 8, 14, 21, 29, 37, 44, 50],\n  [4, 9, 15, 22, 30, 38, 45, 51, 56],\n  [10, 16, 23, 31, 39, 46, 52, 57],\n  [17, 24, 32, 40, 47, 53, 58],\n  [25, 33, 41, 48, 54, 59],\n  [34, 42, 49, 55, 60]\n];\n\nconst RocketLine = [\n  [3,8,14,21],\n  [2,7,13,20,27],\n  [1,6,12,19,26,32],\n  [0,5,11,18,25,31,36],\n  [4,10,17,24,30,35],\n  [9,16,23,29,34],\n  [15,22,28,33],\n];\n\nconst Tiles = [\n  {\n    type: 1,\n    list: [[[0, 0]]],\n  },\n  {\n    type: 2,\n    list: [\n      //[[1, -1], [0, 0]],        //右斜\n      //[[1, -1],[1, 0]],         //左斜\n      [[0, 0], [1, 0]],         //横\n      //[[0, 0], [1, 0], [0, 1], [1, 1]]\n    ]\n  },\n  {\n    type: 3,\n    list: [\n      //[[1, -1], [0, 0]],        //右斜\n      //[[1, -1],[1, 0]],         //左斜\n      [[0, 0], [1, 0]],         //横\n      //[[0, 0], [1, 0], [0, 1], [1, 1]]\n    ]\n  },\n  {\n    type: 4,\n    list: [\n      [[1, -1], [0, 0]],        //右斜\n      //[[0, 0], [1, 0], [0, 1], [1, 1]]\n    ]\n  },\n  {\n    type: 5,\n    list: [\n      [[1, -1],[1, 0]],         //左斜\n      //[[0, 0], [1, 0], [0, 1], [1, 1]]\n    ]\n  },\n  {\n    type: 6,\n    list: [\n      [[1, -1], [0, 0]],        //右斜\n      [[0, 0], [1, 0]],         //横\n      //[[0, 0], [1, 0], [0, 1], [1, 1]]\n    ]\n  },\n\n  // {\n  //   type: 2,\n  //   list: [\n  //     [[1, -1], [0, 0], [1, 0], [0, 1]],\n  //     [[0, 0], [1, 0], [-1, 1], [0, 1]],\n  //     [[0, 0], [1, 0], [0, 1], [1, 1]]\n  //   ]\n  // },\n  // {\n  //   type: 3,\n  //   list: [\n  //     [[0, -1], [0, 0], [0, 1], [0, 2]],\n  //     [[0, 0], [1, -1], [-1, 1], [-2, 2]],\n  //     [[-1, 0], [0, 0], [1, 0], [2, 0]]\n  //   ]\n  // },\n  // {\n  //   type: 4,\n  //   list: [\n  //     [[0, 0], [0, 1], [0, -1], [-1, 0]],\n  //     [[0, 0], [0, -1], [1, -1], [-1, 1]],\n  //     [[0, 0], [0, 1], [0, -1], [1, 0]],\n  //     [[0, 0], [1, 0], [-1, 0], [1, -1]],\n  //     [[0, 0], [1, 0], [-1, 0], [-1, 1]]\n  //   ]\n  // },\n  // {\n  //   type: 5,\n  //   list: [\n  //     [[0, 0], [0, 1], [0, -1], [1, -1]],\n  //     [[0, 0], [1, -1], [-1, 1], [-1, 0]],\n  //     [[0, 0], [1, -1], [-1, 1], [1, 0]],\n  //     [[0, 0], [1, 0], [-1, 0], [0, -1]],\n  //     [[0, 0], [1, 0], [-1, 0], [0, 1]]\n  //   ]\n  // },\n  // {\n  //   type: 6,\n  //   list: [\n  //     [[0, -1], [-1, 0], [-1, 1], [0, 1]],\n  //     [[-1, 0], [0, -1], [1, -1], [1, 0]],\n  //     [[0, -1], [1, -1], [1, 0], [0, 1]],\n  //     [[-1, 1], [0, 1], [1, 0], [1, -1]],\n  //     [[-1, 0], [-1, 1], [0, -1], [1, -1]],\n  //     [[-1, 0], [-1, 1], [0, 1], [1, 0]]\n  //   ]\n  // }\n];\n\n\n\nexport default {DelRules, Tiles,RocketLine};\n","// Learn cc.Class:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        is_enbale: true,\n        is_debug: true,\n    \n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    start () {\n        if (this.is_enbale == true) {\n            var manager = cc.director.getCollisionManager(); // 获取碰撞管理器\n            manager.enabled = true; // 开启碰撞\n            manager.enabledDebugDraw = false; // 允许绘制碰撞的区域\n        }\n    },\n\n    // update (dt) {},\n});\n","import Board from 'Board';\n\n\ncc.Class({\n    extends: cc.Component,\n    properties: {\n        Count: 3,\n        board: {\n            // 获取棋盘节点访问\n            default: null,\n            type: Board\n          },\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n        this.addTouchEvent();\n        this.HammerCntLabel = cc.find('Canvas/HCount').getComponent(cc.Label);\n    },\n\n    start () {\n        this.node.ox = this.node.x;\n        this.node.oy = this.node.y;\n        this.markedTile = null;\n        this.HammerCntLabel.string = String(this.Count);\n    },\n\n    // onCollisionEnter (other, self) {\n    //     cc.log(\"other.name = \",+ other.node.tag);\n    //     if (other.node.groupIndex === 1) { // 表示是PLAYER类型撞到了，道具拾取成功\n    //         this.node.removeFromParent();//消失\n    //     }\n    // },\n\n   addTouchEvent() {\n    this.node.on('touchstart', event => {\n        this.node.setScale(1.2);\n        this.boardTiles = [];\n    });\n    this.node.on('touchmove', event => {\n        const { x, y } = event.touch.getDelta();\n    \n        this.node.x += x*1.1;\n        this.node.y += y*1.1;\n        // 方块与棋盘的触碰检测，并返回重合的部分。\n        this.checkCollision();\n        this.dropPrompt(true);\n    });\n    this.node.on('touchend', () => {    \n        this.removeTile1();\n    });\n    this.node.on('touchcancel', () => {\n        this.removeTile1();\n    }); \n  },\n\n  iterateRestore() {\n    const boardFrameList = this.board.boardFrameList;\n    for (let i = 0; i < boardFrameList.length;i++) {\n        const fillNode = boardFrameList[i].getChildByName('fillNode');\n        fillNode.opacity = 255;\n    }\n  },\n\n  removeTile1() {\n    if (this.markedTile != null) {\n        if (this.Count >= 1) {\n            this.markedTile.isFulled = false;\n            this.markedTile.getChildByName('fillNode').tag = -1;\n            this.markedTile.getChildByName('fillNode').getComponent(cc.Sprite).spriteFrame = null;\n            this.Count--;\n            this.HammerCntLabel.string = String(this.Count);\n            this.markedTile = null;\n            //this.backSourcePos();\n        } else {\n            this.markedTile.getChildByName('fillNode').opacity = 255;\n        }\n    }\n\n    this.iterateRestore();\n    this.backSourcePos();\n  },\n\n  removeTile () {\n      if (this.Count >= 1) {\n        const boardTiles = this.boardTiles;\n        cc.log(\"length: \" + boardTiles.length);\n        if (this.boardTiles.length > 0 && this) {\n            boardTiles[0].isFulled = false;\n            boardTiles[0].getChildByName('fillNode').tag = -1;\n            boardTiles[0].getChildByName('fillNode').getComponent(cc.Sprite).spriteFrame = null;\n            this.backSourcePos();\n            this.Count--;\n            this.HammerCntLabel.string = String(this.Count);\n            this.iterateRestore();\n        } \n        this.backSourcePos();\n      } else {\n          //this.node.active = false;\n        this.backSourcePos();\n      }\n  },\n\n  backSourcePos() {\n    this.node.x = this.node.ox;\n    this.node.y = this.node.oy;\n  },\n\n  checkCollision() {\n    const tile = this.node;\n    this.boardTiles = []; // 保存棋盘与方块重合部分。\n    //const pos = cc.pAdd(this.node.position, tile.position);\n    const pos = this.node.position;\n    const boardTile = this.checkDistance(pos);\n    if (boardTile) {  \n        this.boardTiles.push(boardTile);\n    }\n  },\n  checkDistance(pos) {\n    const distance = 30;\n    const boardFrameList = this.board.boardFrameList;\n    for (let i = 0; i < boardFrameList.length; i++) {\n      const frameNode = boardFrameList[i];\n      if (frameNode.isFulled) {\n        const nodeDistance = cc.pDistance(frameNode.position, pos);\n        if (nodeDistance <= distance ) {\n            return frameNode;\n        }\n      }\n    }\n  },\n  resetBoardFrames() {\n    const boardFrameList = this.board.boardFrameList;\n\n    for (let i = 0; i < boardFrameList.length; i++) {\n      const shadowNode = boardFrameList[i].getChildByName('shadowNode');\n      shadowNode.opacity = 0;\n    }\n  },\n  dropPrompt() {\n    if (this.Count <= 0) return;\n    const boardTiles = this.boardTiles;\n    const boardTilesLength = boardTiles.length;\n   \n    this.resetBoardFrames();\n\n    for (let i = 0; i < boardTilesLength; i++) {\n        const fillNode = boardTiles[i].getChildByName('fillNode');\n        fillNode.opacity = 100;\n        this.markedTile = boardTiles[i];\n        return;\n        //const spriteFrame = boardTiles[i].getComponent(cc.Sprite).spriteFrame;\n        //fillNode.getComponent(cc.Sprite).spriteFrame = null;\n        //cc.delayTime(0.2);\n        //fillNode.getComponent(cc.Sprite).spriteFrame = null;\n        //fillNode.opacity = 255;\n        //fillNode.tag = -1;\n    }\n  },\n\n    // update (dt) {},\n});\n","import Board from 'Board';\nimport { Tiles } from 'Config';\nimport _ from './util/Util';\n\nconst getRandomInt = function(min, max) {\n  let ratio = cc.random0To1();\n  return min + Math.floor((max - min) * ratio);\n};\n\ncc.Class({\n  extends: cc.Component,\n  properties: {\n    tileH: 122, // 方块六边形高度\n    tileScale: 0.7, // 方块默认缩放值，用于点击后放大效果\n    turn:1,\n    board: {\n      // 获取棋盘节点访问\n      default: null,\n      type: Board\n    },\n    // 以下为各方块类型图片\n    type1: {\n      default: null,\n      type: cc.SpriteFrame\n    },\n    type2: {\n      default: null,\n      type: cc.SpriteFrame\n    },\n    type3: {\n      default: null,\n      type: cc.SpriteFrame\n    },\n    type4: {\n      default: null,\n      type: cc.SpriteFrame\n    },\n    type5: {\n      default: null,\n      type: cc.SpriteFrame\n    },\n    type6: {\n      default: null,\n      type: cc.SpriteFrame\n    },\n    type7: {\n      default: null,\n      type: cc.SpriteFrame\n    },\n    type8: {\n      default: null,\n      type: cc.SpriteFrame\n    }\n  },\n\n  // LIFE-CYCLE CALLBACKS:\n  onLoad() {\n    this.range = 2;\n    this.setTile();\n    this.addTouchEvent();\n  },\n  \n  start() {\n    this.TurnCntLabel = cc.find('Canvas/TCount').getComponent(cc.Label);\n    this.TurnCntLabel.string = String(this.turn);\n    \n  },\n\n  rangeAdd() {\n    cc.log(\"rangeAdd!!\");\n    if (this.range < 7) {\n      this.range += 1;\n    }\n  },\n\n  setTile1() {\n    this.tiles = Tiles;\n\n    const hexData =  this.random1();\n\n\n    let hexPx = hexData.list.map(hexArr => {\n      return this.hex2pixel(hexArr, this.tileH);\n    });\n\n    this.setSpriteFrame(hexPx);\n    this.node.scale = this.tileScale;\n    this.node.ox = this.node.x;\n    this.node.oy = this.node.y;\n    //this.node.runAction(cc.sequence(cc.scaleTo(2,0.8)));\n  },\n\n  setTile() {\n    this.tiles = Tiles;\n\n    const hexData = this.random();\n\n\n    let hexPx = hexData.list.map(hexArr => {\n      return this.hex2pixel(hexArr, this.tileH);\n    });\n\n    this.setSpriteFrame(hexPx);\n    this.node.scale = this.tileScale;\n    this.node.ox = this.node.x;\n    this.node.oy = this.node.y;\n    //his.node.runAction(cc.sequence(cc.scaleTo(2,0.8)));\n  },\n  random1() {\n    const shape = this.tiles[0];\n    const list = shape.list[0];\n    return {\n      type: shape.type,\n      list: list\n    };\n  },\n  \n  random() {\n    const shape = this.tiles[getRandomInt(0, this.tiles.length)];\n    const list = shape.list[getRandomInt(0, shape.list.length)];\n    return {\n      type: shape.type,\n      list: list\n    };\n  },\n  hex2pixel(hexArr, h) {\n    let size = h / 2;\n    let x = size * Math.sqrt(3) * (hexArr[0] + hexArr[1] / 2);\n    let y = ((size * 3) / 2) * hexArr[1];\n    return cc.p(x, y);\n  },\n\n  setSpriteFrame(hexes) {\n    for (let index = 0; index < hexes.length; index++) {\n      let node = new cc.Node('frame');\n      let sprite = node.addComponent(cc.Sprite);\n      let hexData = this.random();\n      cc.log(\"this.range: \" + this.range);\n      let idx = getRandomInt(1,this.range); //前闭后开区间 对应属性中的spriteFrame\n      //let idx = 3;\n      sprite.spriteFrame = this['type' + idx]; //spriteFrame对应编号\n      //sprite.spriteFrame = this['type${idx.toString()}'];\n      node.x = hexes[index].x;\n      node.y = hexes[index].y;\n      node.parent = this.node;\n      node.tag = idx; \n      node.isBuilding = false;                  \n    }\n  },\n\n  onTurnBtn() {\n    if (this.turn >= 1) {\n      this.turn--;\n      this.resetTile();\n      this.TurnCntLabel.string = String(this.turn);\n    }\n  },\n\n  onReverseBtn() {\n    if (this.node.children.length == 2 ) {\n      var x = this.node.children[0].x;\n      var y = this.node.children[0].y;\n      this.node.children[0].setPosition(this.node.children[1].x,this.node.children[1].y);\n      this.node.children[1].setPosition(x,y);\n    }\n\n  },\n\n  addTouchEvent() {\n    this.node.on('touchstart', event => {\n      this.node.setScale(1);\n      this.node.children.forEach(child => {\n       child.setScale(1.1);\n      });\n      this.boardTiles = [];\n      this.fillTiles = [];\n    });\n    this.node.on('touchmove', event => {\n      const { x, y } = event.touch.getDelta();\n\n      this.node.x += x;\n      this.node.y += y;\n      // 方块与棋盘的触碰检测，并返回重合的部分。\n      this.checkCollision();\n\n      if (this.checkCanDrop()) {\n        this.dropPrompt(true);\n      } else {\n        this.dropPrompt(false);\n      }\n    });\n    this.node.on('touchend', () => {\n      this.tileDrop();\n    });\n    this.node.on('touchcancel', () => {\n      this.tileDrop();\n    });\n  },\n  tileDrop() {\n    this.resetBoardFrames();\n    if (this.checkCanDrop()) {\n      const boardTiles = this.boardTiles;\n      const fillTiles = this.fillTiles;\n      const fillTilesLength = fillTiles.length;\n      this.locations = [];\n\n      for (let i = 0; i < fillTilesLength; i++) {\n        const boardTile = boardTiles[i];\n        const fillTile = fillTiles[i];\n        const fillNode = boardTile.getChildByName('fillNode');\n        //const moveNode = boardTile.getChildByName('moveNode');\n        const spriteFrame = fillTile.getComponent(cc.Sprite).spriteFrame;\n        // 棋盘存在方块的标识设置\n        boardTile.isFulled = true;\n        fillNode.getComponent(cc.Sprite).spriteFrame = spriteFrame;\n        //moveNode.getComponent(cc.Sprite).spriteFrame = spriteFrame;\n        fillNode.tag = fillTile.tag; // 把shape中方块的tag赋值给棋盘fillNode.tag\n        //cc.log(\"fillTile.tag: \" + fillTile.tag);\n        this.locations.push(boardTile.tag);\n        // 落子成功后重置方块\n        if (!this.checkCurBoard()) {\n          this.resetTile();\n        } else {\n          this.resetTile1();\n        }\n        \n      }\n\n      // 这里棋盘需要访问当前方块的六边形总数\n      this.board.curTileLength = fillTiles.length;\n      // 触发落入成功的事件\n      let msgContent = \"\";\n      for (let i = this.locations.length-1;i >= 0;i--) {\n        msgContent += this.locations[i];\n        msgContent += \",\";\n      }\n\n      // cc.log(\"msgContent: \" + msgContent);\n      this.board.node.emit('dropSuccess',{\n        msg: msgContent,\n      });\n    } else {\n      this.backSourcePos();\n    }\n    \n    //this.checkDrop();\n  },\n\n  checkCurBoard() {\n    const boardFrameList = this.board.boardFrameList;\n    const boardFrameListLength = boardFrameList.length;\n    let count = 0;\n    for (let i = 0;i < boardFrameListLength;i++) {\n      const boardNode = boardFrameList[i];\n      if (!boardNode.isFulled) {\n        //cc.log(\"empty cell: \" + boardNode.tag);\n        count++;\n      }\n    }\n\n    if (count < 14) {\n      return true;\n    } else {\n      return false;\n    }\n\n  },\n\n  checkLose1() {\n    const boardFrameList = this.board.boardFrameList;\n    const boardFrameListLength = boardFrameList.length;\n    let count = 0;\n    for (let i = 0;i < boardFrameListLength;i++) {\n      const boardNode = boardFrameList[i];\n      if (boardNode.isFulled) {\n        //cc.log(\"empty cell: \" + boardNode.tag);\n        count++;\n      }\n    }\n\n    //cc.log(\"lose count: \" + count);\n    if (count == 37) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n\n  // fillTile.tag为当前生成的方块的类型\n  checkEnd() {\n    if (this.checkCurBoard()) {\n      this.checkCollision();\n      if (this.checkDrop()) {\n        if (this.checkLose1()) {\n          return true\n        } else {\n          return false;\n        }\n      } \n    } else {\n      return false;\n    }\n  },\n\n  checkLose() {\n    const tiles = this.node.children;\n    const tilesLength = tiles.length;\n    const boardFrameList = this.board.boardFrameList;\n    const boardFrameListLength = boardFrameList.length;\n    this.tmpArr = [];\n    this.resultArr = [];\n    this.neiArr = [];\n    this.sneiArr = [];\n\n    for (let i = 0; i < boardFrameListLength; i++) {\n      const boardNode = boardFrameList[i];\n      if (!boardNode.isFulled) {\n        for (let j = 0; j < tilesLength; j++) {\n          this.tmpArr = _.getNeighbors(String(boardNode.tag));\n          for (let k = 0;k < this.tmpArr.length;k++) {\n            if (boardFrameList[this.tmpArr[k]].isFulled && Number(boardNode.tag) != Number(this.tmpArr[k]) &&\n              tiles[j].tag == boardFrameList[this.tmpArr[k]].getChildByName('fillNode').tag &&\n              this.resultArr.indexOf(boardFrameList[this.tmpArr[k]])== -1) {\n                this.resultArr.push(boardFrameList[this.tmpArr[k]]);\n                this.neiArr = _.getNeighbors(String(this.tmpArr[k]));\n\n                for (let m = 0;m < this.neiArr.length;m++) {\n                    if (boardFrameList[this.neiArr[m]].isFulled && Number(this.neiArr[m]) != Number(this.tmpArr[k]) &&\n                      boardFrameList[this.neiArr[m]].getChildByName('fillNode').tag == boardFrameList[this.tmpArr[k]].getChildByName('fillNode').tag &&\n                      this.resultArr.indexOf(boardFrameList[this.neiArr[m]]) == -1 ) {\n                        this.resultArr.push(boardFrameList[this.neiArr[m]]);\n                        this.sneiArr = _.getNeighbors(String(this.tmpArr[k]));\n\n                        for (let n = 0;n < this.sneiArr.length;n++) {\n                          if (boardFrameList[this.sneiArr[n]].isFulled && Number(this.sneiArr[n]) != Number(this.neiArr[m]) &&\n                             boardFrameList[this.sneiArr[n]].getChildByName('fillNode').tag == boardFrameList[this.neiArr[m]].getChildByName('fillNode').tag &&\n                                 this.resultArr.indexOf(boardFrameList[this.sneiArr[n]]) == -1 ) {\n                                 this.resultArr.push(boardFrameList[this.neiArr[n]]);\n                          }\n                       }\n                    }\n                }\n          }\n        }\n      }\n\n      if (this.resultArr.length >= 2) {\n        this.resultArr = [];\n        return false;\n      }\n    }\n  }\n\n  return true;\n},\n  \ncheckDrop() {\n    let canDropCount = 0;\n    const tiles = this.node.children;\n    const tilesLength = tiles.length;\n    const boardFrameList = this.board.boardFrameList;\n    const boardFrameListLength = boardFrameList.length;\n\n    // TODO: 存在无效检测的情况，可优化\n    for (let i = 0; i < boardFrameListLength; i++) {\n      const boardNode = boardFrameList[i];\n      let srcPos = cc.p(boardNode.x, boardNode.y);\n      let count = 0;\n      if (!boardNode.isFulled) {\n        // 过滤出未填充的棋盘格子\n        for (let j = 0; j < tilesLength; j++) {\n          let len = 50; // 设定重合判定最小间距\n\n          // 将方块移到未填充的棋盘格子原点，并获取当前各方块坐标值\n          let tilePos = cc.pAdd(srcPos, cc.p(tiles[j].x, tiles[j].y));\n\n          // 遍历棋盘格子，判断方块中各六边形是否可以放入\n          for (let k = 0; k < boardFrameListLength; k++) {\n            const boardNode = boardFrameList[k];\n            let dis = cc.pDistance(cc.p(boardNode.x, boardNode.y), tilePos);\n            if (dis <= len && !boardNode.isFulled) {\n              count++;\n            }\n          }\n        }\n\n        if (count === tilesLength) {\n          canDropCount++;\n        }\n      }\n    }\n\n    if (canDropCount === 0) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n  resetTile() {\n    this.node.removeAllChildren();\n    this.node.x = this.node.ox;\n    this.node.y = this.node.oy;\n    this.setTile();\n  },\n\n  resetTile1() {\n    this.node.removeAllChildren();\n    this.node.x = this.node.ox;\n    this.node.y = this.node.oy;\n    this.setTile1();\n  },\n  backSourcePos() {\n    this.node.scale = this.tileScale;\n    this.node.x = this.node.ox;\n    this.node.y = this.node.oy;\n    this.node.children.forEach(child => {\n      child.setScale(1);\n    });\n  },\n  checkCollision() {\n    const tiles = this.node.children;\n    this.boardTiles = []; // 保存棋盘与方块重合部分。\n    this.fillTiles = []; // 保存方块当前与棋盘重合的部分。\n    for (let i = 0; i < tiles.length; i++) {\n      const tile = tiles[i];\n      const pos = cc.pAdd(this.node.position, tile.position);\n      const boardTile = this.checkDistance(pos);\n      if (boardTile) {\n        this.fillTiles.push(tile);    \n        this.boardTiles.push(boardTile);\n      }\n    }\n  },\n  checkDistance(pos) {\n    const distance = 50;\n    const boardFrameList = this.board.boardFrameList;\n    for (let i = 0; i < boardFrameList.length; i++) {\n      const frameNode = boardFrameList[i];\n      const nodeDistance = cc.pDistance(frameNode.position, pos);\n      if (nodeDistance <= distance) {\n        return frameNode;\n      }\n    }\n  },\n  checkCanDrop() {\n    const boardTiles = this.boardTiles; // 当前棋盘与方块重合部分。\n    const fillTiles = this.node.children; // 当前拖拽的方块总数。\n    const boardTilesLength = boardTiles.length;\n    const fillTilesLength = fillTiles.length;\n\n    // 如果当前棋盘与方块重合部分为零以及与方块数目不一致，则判定为不能落子。\n    if (boardTilesLength === 0 || boardTilesLength != fillTilesLength) {\n      return false;\n    }\n\n    // 如果方块内以及存在方块，则判定为不能落子。\n    for (let i = 0; i < boardTilesLength; i++) {\n      if (this.boardTiles[i].isFulled) {\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  resetBoardFrames() {\n    const boardFrameList = this.board.boardFrameList;\n\n    for (let i = 0; i < boardFrameList.length; i++) {\n      const shadowNode = boardFrameList[i].getChildByName('shadowNode');\n      shadowNode.opacity = 0;\n    }\n  },\n  dropPrompt(canDrop) {\n    const boardTiles = this.boardTiles;\n    const boardTilesLength = boardTiles.length;\n    const fillTiles = this.fillTiles;\n\n    this.resetBoardFrames();\n    if (canDrop) {\n      for (let i = 0; i < boardTilesLength; i++) {\n        const shadowNode = boardTiles[i].getChildByName('shadowNode');\n        shadowNode.opacity = 100;\n        const spriteFrame = fillTiles[i].getComponent(cc.Sprite).spriteFrame;\n        shadowNode.getComponent(cc.Sprite).spriteFrame = spriteFrame;\n      }\n    }\n  },\n  \n  // update (dt) {\n  // },\n});\n","const _ = {\n  arrIntersect(arr1, arr2) {\n    const intersectArr = [];\n    for (let i = 0; i < arr1.length; i++) {\n      for (let j = 0; j < arr2.length; j++) {\n        if (arr2[j] == arr1[i]) {\n          intersectArr.push(arr2[j]);\n        }\n      }\n    }\n    return intersectArr;\n  },\n\n  //两数组的并集去掉指定元素\n  arrUnion(arr1,arr2,exclude1,exclude2) {\n    const unionArr = [];\n    for (let i = 0;i < arr1.length;i++) {\n      if (arr1[i] != exclude1) {\n        unionArr.push(arr1[i]);\n      }  \n    }\n\n    for (leti = 0;i < arr2.length;i++) {\n      if (arr2[i] != exclude2) {\n        unionArr.push(arr2[i]);\n      }\n    }\n\n    return unionArr;\n  },\n\n  checkArrIsEqual: function(arr1, arr2) {\n    for (var i = 0; i < arr1.length; i++) {\n      if (arr2[i] != arr1[i]) {\n        return false;\n      }\n    }\n    return true;\n  },\n\n  // getNeighbors2(locArr) {\n  //   let resultArr = []; //二维数组\n  //   for (let i = 0;i < locArr.length;i++) {\n  //     tmpArr = this.getNeighbors(locArr[i])\n  //     resultArr[i].push(tmpArr);\n  // }\n\n  //   return resultArr;\n  // },\n  getNeighbors(loc) {\n    const resultArr = [];\n    switch (loc) {\n    case \"3\":\n      resultArr.push(8);\n      resultArr.push(7);\n      resultArr.push(2);\n      break;\n    case \"8\":\n      resultArr.push(14);\n      resultArr.push(13);\n      resultArr.push(7);\n      resultArr.push(3);\n      break;\n    case \"14\":\n      resultArr.push(21);\n      resultArr.push(20);\n      resultArr.push(13);\n      resultArr.push(8);\n      break;\n    case \"21\":\n      resultArr.push(27);\n      resultArr.push(20);\n      resultArr.push(14);\n      break;\n    case \"2\":\n      resultArr.push(3);\n      resultArr.push(7);\n      resultArr.push(6);\n      resultArr.push(1);\n      break;\n    case \"7\":\n      resultArr.push(8);\n      resultArr.push(13);\n      resultArr.push(12);\n      resultArr.push(6);\n      resultArr.push(2);\n      resultArr.push(3);\n      break;\n    case \"13\":\n      resultArr.push(14);\n      resultArr.push(20);\n      resultArr.push(19);\n      resultArr.push(12);\n      resultArr.push(7);\n      resultArr.push(8);\n      break;\n    case \"20\":\n      resultArr.push(27);\n      resultArr.push(26);\n      resultArr.push(19);\n      resultArr.push(21);\n      resultArr.push(13);\n      resultArr.push(14);\n      break;\n    case \"27\":\n      resultArr.push(32);\n      resultArr.push(26);\n      resultArr.push(20);\n      resultArr.push(14);\n      break;\n    case \"1\":\n      resultArr.push(2);\n      resultArr.push(6);\n      resultArr.push(5);\n      resultArr.push(0);\n      break;\n    case \"6\":\n      resultArr.push(7);\n      resultArr.push(12);\n      resultArr.push(11);\n      resultArr.push(5);\n      resultArr.push(1);\n      resultArr.push(2);\n      break;\n    case \"12\":\n      resultArr.push(13);\n      resultArr.push(19);\n      resultArr.push(18);\n      resultArr.push(11);\n      resultArr.push(6);\n      resultArr.push(7);\n      break;\n    case \"19\":\n      resultArr.push(20);\n      resultArr.push(26);\n      resultArr.push(25);\n      resultArr.push(18);\n      resultArr.push(12);\n      resultArr.push(13);\n      break;\n    case \"26\":\n      resultArr.push(27);\n      resultArr.push(32);\n      resultArr.push(31);\n      resultArr.push(25);\n      resultArr.push(19);\n      resultArr.push(20);\n      break;\n    case \"32\":\n      resultArr.push(36);\n      resultArr.push(31);\n      resultArr.push(26);\n      resultArr.push(27);\n      break;\n    case \"0\":\n      resultArr.push(1);\n      resultArr.push(5);\n      resultArr.push(4);\n      break;\n    case \"5\":\n      resultArr.push(6);\n      resultArr.push(11);\n      resultArr.push(10);\n      resultArr.push(4);\n      resultArr.push(0);\n      resultArr.push(1);\n      break;\n    case \"11\":\n      resultArr.push(12);\n      resultArr.push(18);\n      resultArr.push(17);\n      resultArr.push(10);\n      resultArr.push(5);\n      resultArr.push(6);\n      break;\n    case \"18\":\n      resultArr.push(19);\n      resultArr.push(25);\n      resultArr.push(24);\n      resultArr.push(17);\n      resultArr.push(11);\n      resultArr.push(12);\n      break;\n    case \"25\":\n      resultArr.push(26);\n      resultArr.push(31);\n      resultArr.push(30);\n      resultArr.push(24);\n      resultArr.push(18);\n      resultArr.push(19);\n      break;\n    case \"31\":\n      resultArr.push(32);\n      resultArr.push(36);\n      resultArr.push(35);\n      resultArr.push(30);\n      resultArr.push(25);\n      resultArr.push(26);\n      break;\n    case \"36\":\n      resultArr.push(35);\n      resultArr.push(31);\n      resultArr.push(32);\n      break;\n    case \"4\":\n      resultArr.push(5);\n      resultArr.push(10);\n      resultArr.push(9);\n      resultArr.push(0);\n      break;\n    case \"10\":\n      resultArr.push(11);\n      resultArr.push(17);\n      resultArr.push(16);\n      resultArr.push(9);\n      resultArr.push(4);\n      resultArr.push(5);\n      break;\n    case \"17\":\n      resultArr.push(18);\n      resultArr.push(24);\n      resultArr.push(23);\n      resultArr.push(16);\n      resultArr.push(10);\n      resultArr.push(11);\n      break;\n    case \"24\":\n      resultArr.push(25);\n      resultArr.push(30);\n      resultArr.push(29);\n      resultArr.push(23);\n      resultArr.push(17);\n      resultArr.push(18);\n      break;\n    case \"30\":\n      resultArr.push(31);\n      resultArr.push(35);\n      resultArr.push(34);\n      resultArr.push(29);\n      resultArr.push(24);\n      resultArr.push(25);\n      break;\n    case \"35\":\n      resultArr.push(36);\n      resultArr.push(34);\n      resultArr.push(30);\n      resultArr.push(31);\n      break;\n    case \"9\":\n      resultArr.push(10);\n      resultArr.push(16);\n      resultArr.push(15);\n      resultArr.push(4);\n      break;\n    case \"16\":\n      resultArr.push(17);\n      resultArr.push(23);\n      resultArr.push(22);\n      resultArr.push(15);\n      resultArr.push(9);\n      resultArr.push(10);\n      break;\n    case \"23\":\n      resultArr.push(24);\n      resultArr.push(29);\n      resultArr.push(28);\n      resultArr.push(22);\n      resultArr.push(16);\n      resultArr.push(17);\n      break;\n    case \"29\":\n      resultArr.push(30);\n      resultArr.push(34);\n      resultArr.push(33);\n      resultArr.push(28);\n      resultArr.push(23);\n      resultArr.push(24);\n      break;\n    case \"34\":\n      resultArr.push(35);\n      resultArr.push(33);\n      resultArr.push(29);\n      resultArr.push(30);\n      break;\n    case \"15\":\n      resultArr.push(16);\n      resultArr.push(22);\n      resultArr.push(9);\n      break;\n    case \"22\":\n      resultArr.push(23);\n      resultArr.push(28);\n      resultArr.push(15);\n      resultArr.push(16);\n      break;\n    case \"28\":\n      resultArr.push(29);\n      resultArr.push(33);\n      resultArr.push(22);\n      resultArr.push(23);\n      break;\n    case \"33\":\n      resultArr.push(34);\n      resultArr.push(28);\n      resultArr.push(29);\n      break;\n    }\n    return resultArr;\n  },\n\n  getRandomInt: function(min, max) {\n    let ratio = cc.random0To1();\n    return min + Math.floor((max - min) * ratio);\n  },\n\n};\n\nexport default _;\n","\n//生成棋盘  \n//消除检测 \n\nconst disList = [\n    //一个方向\n    [0, 1, 2, 3],\n    [4, 5, 6, 7, 8],\n    [9, 10, 11, 12, 13, 14],\n    [15, 16, 17, 18, 19, 20, 21],\n    [22, 23, 24, 25, 26, 27],\n    [28, 29, 30, 31, 32],\n    [33, 34, 35, 36],\n\n\n    //另一个方向\n    [26, 35, 43, 50, 56],\n    [18, 27, 36, 44, 51, 57],\n    [11, 19, 28, 37, 45, 52, 58],\n    [5, 12, 20, 29, 38, 46, 53, 59],\n    [0, 6, 13, 21, 30, 39, 47, 54, 60],\n    [1, 7, 14, 22, 31, 40, 48, 55],\n    [2, 8, 15, 23, 32, 41, 49],\n    [3, 9, 16, 24, 33, 42],\n    [4, 10, 17, 25, 34],\n\n    //横向\n    [0, 5, 11, 18, 26],\n    [1, 6, 12, 19, 27, 35],\n    [2, 7, 13, 20, 28, 36, 43],\n    [3, 8, 14, 21, 29, 37, 44, 50],\n    [4, 9, 15, 22, 30, 38, 45, 51, 56],\n    [10, 16, 23, 31, 39, 46, 52, 57],\n    [17, 24, 32, 40, 47, 53, 58],\n    [25, 33, 41, 48, 54, 59],\n    [34, 42, 49, 55, 60],\n]\n\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        [\"gridLineCount\"]: 4,       //每行每列的六边形格子数\n        [\"gridH\"]: 0,               //一个参数\n        [\"gridA\"]: 0,               //另一个参数 都用于调整格子生成的位置\n        [\"frameSprite\"] : {        \n            default: null,\n            type: cc.SpriteFrame,   \n        },                          //格子的图片\n       \n        \n    },\n\n    checkMatch: function(arg) {\n        cc.error(\"testtesttest\")\n    },\n\n    // use this for initialization\n    onLoad: function () {\n        var srcPos = cc.p(this.node.x,this.node.y)\n        var lbxNodes = []\n        var lbxNodesIndex = 0\n        var maxCount = this[\"gridLineCount\"] * 2 - 1\n        \n        var posList = [\n            {\n                count: 4,\n                srcPos: cc.p(0,0)\n            },\n\n            {\n                count: 5,\n                srcPos: cc.p(2 * this[\"gridH\"],0)\n            },\n\n            {\n                count: 6,\n                srcPos: cc.p(4 * this[\"gridH\"],0)\n            },\n\n            {\n                count: 7,\n                srcPos: cc.p(6 * this[\"gridH\"],0)\n            },\n\n            {\n                count: 6,\n                srcPos: cc.p(6 * this[\"gridH\"] + this[\"gridH\"],(-3 * this[\"gridA\"])/2 )\n            },\n\n            {\n                count: 5,\n                srcPos: cc.p(6 * this[\"gridH\"] + this[\"gridH\"] * 2,(-3 * this[\"gridA\"] * 2)/2)\n            },\n\n            {\n                count: 4,\n                srcPos: cc.p(6 * this[\"gridH\"] + this[\"gridH\"] * 3,(-3 * this[\"gridA\"] * 3)/2)\n            },\n        ]\n\n        var addVec = cc.pMult(cc.pForAngle(240 * (2 * Math.PI / 360)), this[\"gridH\"] * 2)\n\n        var pianyiTo0p0Vec = cc.pMult(cc.pForAngle(120 * (2 * Math.PI / 360)), this[\"gridH\"] * 2 * 4)\n\n        var frameList = []\n    \n        var fPosList = []\n\n        for (var i = 0;i < posList.length;i++) {\n            var count = posList[i].count\n            var oneSrcPos = cc.pAdd(posList[i].srcPos,pianyiTo0p0Vec)\n            var aimPos = cc.pAdd(srcPos,oneSrcPos)\n\n            for (var j = 0;j < count;j++) {\n                var fpos = cc.pAdd(aimPos,cc.pMult(addVec,j))\n                fPosList.push(fpos)\n            }\n        }\n\n        for (var index = 0; index < fPosList.length; index++){\n            var node = new cc.Node(\"frame\")\n            var sprite = node.addComponent(cc.Sprite)\n            sprite.spriteFrame = this[\"frameSprite\"]\n\n            node.x = fPosList[index].x\n            node.y = fPosList[index].y\n            node.parent = this.node\n            node.FKIndex = index\n            frameList.push(node)\n        }\n\n        this.frameList = frameList\n        this.posList = posList\n        //TODO:init touch\n\n        //this event launched by piece script function \n        this.node.on('successDropDown',this.checkMatch,this)\n\n    },\n\n    // called every frame\n    update: function (dt) {\n\n    },\n});\n","const InitBoard = require('game')\nconst scaleParam = 0.7\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        board :{\n            default: null,\n            type: InitBoard\n\n        },\n        [\"blockTex\"]: {\n            default: null,\n            type:cc.SpriteFrame,\n        },\n\n        [\"gridH\"]: 0,\n        [\"gridA\"]: 0,\n\n        //2,4,8,16,32,64,128,256,512,1024,2048\n        [\"block2\"]: {\n            default: null,\n            type: cc.SpriteFrame,\n        },\n\n        // [\"block4\"]: {\n        //     default: null,\n        //     type: cc.SpriteFrame,\n        // },\n\n        // [\"block8\"]: {\n        //     default: null,\n        //     type: cc.SpriteFrame,\n        // },\n    },\n\n    random: function (min, max) {\n        \n        return Math.floor(Math.random()*(max - min + 1) + min)\n    },\n\n    getPieceConfig: function() {\n\n        var a = this[\"gridA\"]\n        var h = this[\"gridH\"]\n\n        var configLists = [\n            //一个\n            [cc.p(0, 0)],\n            //两个\n            [cc.p(0, 0), cc.p(h * 2, 0)], //横摆\n            [cc.p(0, 0), cc.p(h, a * 1.5)], //斜摆1\n            [cc.p(0, 0), cc.p(h, -a * 1.5)], //斜摆2\n\n            [cc.p(0, 0), cc.p(h * 2, 0), cc.p(h * 4, 0)], //横摆\n            [cc.p(0, 0), cc.p(h * 2, 0), cc.p(h * 3, a * 1.5)], //横摆1\n            [cc.p(0, 0), cc.p(h * 2, 0), cc.p(h * 3, -a * 1.5)], //横摆2\n            [cc.p(0, 0), cc.p(h * 2, 0), cc.p(h, a * 1.5)], //堆1\n            [cc.p(0, 0), cc.p(h * 2, 0), cc.p(h, -a * 1.5)], //堆2\n\n            [cc.p(0, 0), cc.p(h, a * 1.5), cc.p(h * 3, a * 1.5)], //斜摆1\n            [cc.p(0, 0), cc.p(h, a * 1.5), cc.p(h * 2, a * 3)], //斜摆2\n            [cc.p(0, 0), cc.p(h, a * 1.5), cc.p(0, a * 3)], //斜摆3\n\n            [cc.p(0, 0), cc.p(h, -a * 1.5), cc.p(h * 3, -a * 1.5)], //斜下摆1\n            [cc.p(0, 0), cc.p(h, -a * 1.5), cc.p(h * 2, -a * 3)], //斜下摆2\n            [cc.p(0, 0), cc.p(h, -a * 1.5), cc.p(0, -a * 3)], //斜下摆3\n        ]\n\n        return configLists\n    },\n\n\n    newBlock: function() {\n        var node = new cc.Node(\"colorSpr\")\n        var sprite = node.addComponent(cc.Sprite)\n        sprite.spriteFrame = this[\"block2\"]\n\n        //加纹理\n        var wenliNode = new cc.Node(\"wenliSpr\")\n        var wenliSprite = wenliNode.addComponent(cc.Sprite)\n        wenliSprite.spriteFrame = this[\"blockTex\"]\n\n        wenliNode.parent = node\n\n        return node\n    },\n\n    newPiece: function() {\n        var blockNode = new cc.Node(\"block\")\n        var configList = this.getPieceConfig()\n\n        var randomIdx = this.random(0,configList.length-1)\n        var posList = configList[randomIdx]\n\n        randomIdx = this.random(1,4)\n        var sumX = 0\n        var countX = 0\n        var sumY = 0\n        var countY = 0\n\n        for (var i = 0;i < posList.length;i++) {\n            var pos = posList[i]\n            var block = this.newBlock()\n            block.x = pos.x\n\n            sumX += block.x\n            countX++\n\n            block.y = pos.y\n\n            sumY += block.y\n            countY++\n\n            blockNode.addChild(block)\n        }\n\n        blockNode.x = -sumX / countX\n        blockNode.y = -sumY / countY\n\n        blockNode.setScale(scaleParam)\n\n        return blockNode\n    },\n\n    addTouchEvent: function() {\n        var upH = 100\n        var self = this\n\n        this.node.ox = this.node.x\n        this.node.oy = this.node.y\n\n\n        this.node.on(cc.Node.EventType.TOUCH_START, function() {\n            this.y += upH\n                //cc.log(\"原位置：\", this.ox, this.oy)\n\n            this.getChildByName(\"block\").setScale(1)\n\n            //cc.audioEngine.playEffect(self.anSound)\n\n        }, this.node)\n        \n        this.node.on(cc.Node.EventType.TOUCH_MOVE, function(event) {\n\n            var delta = event.touch.getDelta()\n            this.x += delta.x\n            this.y += delta.y\n\n            self.collisionFunc()\n\n            //变色处理\n            if (!self.checkIsCanDrop()) {\n                self.changeColorDeal(true)\n            } else {\n                self.changeColorDeal()\n            }\n        }, this.node)\n\n        this.node.on(cc.Node.EventType.TOUCH_CANCEL, function(event) {\n            this.dropDownFunc()\n\n        }, this)\n        \n        this.node.on(cc.Node.EventType.TOUCH_END, function(event) {\n            this.dropDownFunc()\n\n        }, this)\n\n    },\n\n    onLoad: function () {\n        this.checkFrameList = []\n        this.checkFKList = []\n\n        var newNode = this.newPiece()\n        this.node.addChild(newNode)\n\n        this.addTouchEvent()\n\n    },\n\n\n    // update (dt) {},\n});\n","// Learn cc.Class:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        rankingScrollView: cc.Sprite,\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    start () {\n        if (CC_WECHATGAME) {\n            window.wx.showShareMenu({withShareTicket: true});//设置分享按钮，方便获取群id展示群排行榜\n            this.tex = new cc.Texture2D();\n            window.sharedCanvas.width = 720;\n            window.sharedCanvas.height = 1280;\n            window.wx.postMessage({\n                messageType: 1,\n                MAIN_MENU_NUM: \"x1\"\n            });\n        }\n\n        this.isClick = false;\n    },\n\n    onfriendClick() {\n        if (CC_WECHATGAME) {\n            //if (this.isClick == false) {\n                // 发消息给子域\n                window.wx.postMessage({\n                    messageType: 1,\n                    MAIN_MENU_NUM: \"x1\"\n                });\n                this.isClick = true;\n            //} else {\n                \n           // }\n\n        } else {\n            cc.log(\"获取好友排行榜数据。x1\");\n        }\n    },\n\n    onFriendCancelClick() {\n        if (CC_WECHATGAME) {\n            // 发消息给子域\n            window.wx.postMessage({\n                messageType: 0,\n                MAIN_MENU_NUM: \"x1\"\n            });\n            this.isClick = false;\n        } else {\n            cc.log(\"获取好友排行榜数据。x1\");\n        }\n    },\n\n    onStartClick: function(){\n        cc.director.loadScene(\"gameScene\");\n    },\n\n    onShareClick: function(){\n        cc.log(\"点击分享按钮\");\n        cc.loader.loadRes(\"pics/logo\",function(err,data){\n            wx.shareAppMessage({\n                title: \"不怕，就来PK！\",\n                imageUrl: data.url,\n                success(res){\n                    console.log(\"转发成功!!!\");\n                },\n                fail(res){\n                    console.log(\"转发失败!!!\");\n                } \n            })\n        });\n    },\n\n    onGameClick: function(){\n\n    },\n\n    onRankClick: function(){\n\n    },\n\n    onSoundClick: function(){\n\n    },\n\n    _updateSubDomainCanvas() {\n        if (window.sharedCanvas != undefined) {\n            this.tex.initWithElement(window.sharedCanvas);\n            this.tex.handleLoadedTexture();\n            this.rankingScrollView.spriteFrame = new cc.SpriteFrame(this.tex);\n        }\n    },\n\n    update (dt) {\n        if (this.isClick) {\n            this._updateSubDomainCanvas();\n        }\n        \n    },\n});\n"],"sourceRoot":"/source/","file":"project.dev.js"}